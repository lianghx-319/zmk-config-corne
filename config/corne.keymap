/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

//#include <dt-bindings/zmk/mouse.h> /* to be able to use keyboard mouse */
/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

&spi1 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    mosi-pin = <6>;

    // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.

    sck-pin = <5>;
    miso-pin = <7>;

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "WS2812";

        /* SPI */

        reg = <0>;/* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <27>;/* arbitrary; change at will */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen {
        zmk,underglow = &led_strip;
    };
};

/*
 * Above Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

/ {
    /*
 * tap dance test
 */

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mo 1>,
                <&mo 3>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LSHFT>,
                <&kp CAPS>;
        };
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    /*
 * mouse conf
 */
    //&mmv {    
    //        time-to-max-speed-ms = <500>;
    //        acceleration-exponent=<1>;
    //};
    //&mwh {    
    //        time-to-max-speed-ms = <2000>;
    //        acceleration-exponent=<0>;
    //};
    /*
 * 
 * to do : template
 *
 */
    /*
 * to do : alias layer 
 */

    #define BASE 0   
#define LOWER 1
#define RAISE 2
#define FUN 3
#define NAV 4
#define ADJUST 5

    /*to do : conditionnal layer
 * 
 *     conditional_layers {
 *         compatible = "zmk,conditional-layers";
 * 
 *         tri_layer {
 *             if-layers = <LOWER RAISE>;
 *             then-layer = <OPTION>;
 *         };
 *     };
 * 
 */
    /*
 * 
 * to do : macros
 *
 * macros {
 *         macro1: macro1 {
 *             compatible = "zmk,behavior-macro";
 *             label = "new_macro";
 *             #binding-cells = <0>;
 *             bindings = <&kp P &kp DOT &kp T &kp KP_MULTIPLY &kp NUMBER_0 &kp NUMBER_9 &kp NUMBER_8 &kp NUMBER_1 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_9 &kp NUMBER_9 &kp NUMBER_0 &kp NUMBER_2 &kp PLUS &kp T &kp DOT &kp T &kp KP_MULTIPLY &kp PLUS &kp R &kp DOT &kp H>;
 *         };
 *     };
 *
 */
    /*
 * keymap
 */

    combos {
        compatible = "zmk,combos";
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            label = "DEFAULT";
            bindings = <
  &kp TAB  &kp Q  &kp W             &kp E  &kp R               &kp T  &kp Y          &kp U                               &kp I    &kp O     &kp P                   &kp ESC
&kp LCTRL  &kp A  &kp S             &kp D  &kp F               &kp G  &kp H          &kp J                               &kp K    &kp L  &kp SEMI  &tp LC(LS(LEFT_ALT)) SQT
&kp LSHFT  &kp Z  &kp X             &kp C  &kp V               &kp B  &kp N          &kp M                           &kp COMMA  &kp DOT  &kp FSLH                 &kp RSHFT
                         &kp LEFT_COMMAND  &mo 1  &tp LEFT_ALT ENTER  &mo 2  &kp BACKSPACE  &tp LC(LS(LA(LEFT_COMMAND))) SPACE
            >;
        };

        BELOW {
            bindings = <
   &trans  &kp EXCL  &kp AT          &kp HASH  &kp DLLR           &kp PRCNT  &kp CARET       &kp AMPS                            &kp STAR  &kp LPAR  &kp RPAR    &kp BSLH
   &trans    &kp N1  &kp N2            &kp N3    &kp N4              &kp N5  &kp MINUS      &kp EQUAL                           &kp GRAVE  &kp LBKT  &kp RBKT    &kp PIPE
&kp LSHFT    &kp N6  &kp N7            &kp N8    &kp N9              &kp N0  &kp UNDER       &kp PLUS                           &kp TILDE  &kp LBRC  &kp RBRC  &kp RSHIFT
                             &kp LEFT_COMMAND    &trans  &tp LEFT_ALT ENTER     &trans  &kp BACKSPACE  &tp LS(LA(LC(LEFT_COMMAND))) SPACE
            >;
        };

        ABOVE {
            bindings = <
    &trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5    &kp F6    &kp F7  &kp F8     &kp F9  &kp F10  &trans
    &trans        &trans        &trans        &trans        &trans        &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT   &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans    &trans  &trans     &trans   &trans  &trans
                                              &trans        &trans        &trans    &trans    &trans  &trans
            >;
        };
    };
};
